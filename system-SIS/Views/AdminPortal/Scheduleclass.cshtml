@{
    Layout = "Admin_Layout";  // Specifies the layout to use
    ViewData["Title"] = "Home Page";
}

<body class="position-relative bg-image" style="font-family: 'Poppins', sans-serif; overflow-x: hidden; height: 100vh; width: 100vw; margin: 0;">
    <!-- Background Image -->
    <img src="~/images/bgjr.png"
         alt="Decorative background representing Grade 7"
         class="img-fluid w-100"
         style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; z-index: -1;">

    <!-- Main Content -->
    <div class="container" style="background-color: rgba(220, 232, 253, 0.9); padding: 20px; border-radius: 10px;">
        <section class="fixed ml-72 px-11 py-6 w-full top-20 left-0" style="font-weight: bold;">
            <p class="text-sm text-black fs-5">
                <i class="fas fa-calendar-alt text-black me-2"></i>
                <a asp-controller="AdminPortal" asp-action="Classes" class="text-black text-decoration-none">Class</a>
            </p>
        </section>

        <!-- Class Table -->
        <div class="table-responsive mb-4">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col" style="background-color: #162051; color: white; border-top-left-radius: 10px;">Section</th>
                        <th scope="col" style="background-color: #162051; color: white;">Faculty</th>
                        <th scope="col" style="background-color: #162051; color: white;">Subject</th>
                        <th scope="col" style="background-color: #162051; color: white;">Grade Level</th>
                        <th scope="col" style="background-color: #162051; color: white; border-top-right-radius: 10px;">Action</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td>
                            <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#editModal"
                                    data-section="" data-faculty="" data-subject="" data-grade="">
                                Edit
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Schedule Button and Link -->
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-4">
            <p class="fs-5 text-black d-flex align-items-center mb-3 mb-md-0">
                <i class="fas fa-calendar-alt text-black me-2"></i>
                <a asp-controller="AdminPortal" asp-action="Classes" class="text-black text-decoration-none">Schedule</a>
            </p>
            <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addScheduleModal">
                + Schedule
            </button>
        </div>

        <!-- Schedule Table -->
        <div class="table-responsive mb-4">
            <table class="table table-bordered table-striped schedule-table">
                <thead>
                    <tr>
                        <th>Day</th>
                        <th>Session</th>
                        <th>Subject</th>
                        <th>Start Time</th>
                        <th>End Time</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Schedule data will be loaded here -->
                </tbody>
            </table>
        </div>

        <!-- Remove Class Button -->
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#removeclassModal">
                Remove class
            </button>
        </div>
    </div>


    <!-- Remove Class Modal -->
    <div class="modal fade" id="removeclassModal" tabindex="-1" aria-labelledby="removeclassModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="removeclassModalLabel">Confirm Class Removal</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove this class? This will also remove all associated schedules.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger">Remove Class</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Schedule Modal -->
    <div class="modal fade" id="addScheduleModal" tabindex="-1" aria-labelledby="addScheduleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="addScheduleModalLabel">Add New Schedule</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="scheduleForm">
                        <div class="mb-3">
                            <label for="scheduleDay" class="form-label">Day</label>
                            <select class="form-select" id="scheduleDay" name="day" required>
                                <option value="Monday">Monday</option>
                                <option value="Tuesday">Tuesday</option>
                                <option value="Wednesday">Wednesday</option>
                                <option value="Thursday">Thursday</option>
                                <option value="Friday">Friday</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="scheduleSession" class="form-label">Session</label>
                            <select class="form-select" id="scheduleSession" name="session" required>
                                <option value="Morning">Morning</option>
                                <option value="Afternoon">Afternoon</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="scheduleSubject" class="form-label">Subject</label>
                            <select class="form-select" id="scheduleSubject" name="subject" required>
                                <option value="English">English</option>
                                <option value="Math">Math</option>
                                <option value="Science">Science</option>
                                <option value="History">History</option>
                            </select>
                        </div>

                        <div class="row mb-3">
                            <div class="col-6">
                                <label for="scheduleStartTime" class="form-label">Start Time</label>
                                <input type="time" class="form-control" id="scheduleStartTime" name="start" required>
                            </div>
                            <div class="col-6">
                                <label for="scheduleEndTime" class="form-label">End Time</label>
                                <input type="time" class="form-control" id="scheduleEndTime" name="end" required>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-success" id="saveScheduleBtn">Save Schedule</button>
                </div>
            </div>
        </div>
    </div>

    <!--Edit modal-->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning">
                    <h5 class="modal-title" id="editModalLabel">Edit Schedule Details</h5>

<!--                     <h5 class="modal-title" id="editModalLabel">Edit Schdule Details</h5> -->

                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <!-- Modal Body -->
                <div class="modal-body">
                    <!-- Day and Session Fields -->
                    <div class="row mb-3">
                        <div class="col-12 col-md-6">
                            <label for="editScheduleDay" class="form-label fs-6">Day</label>
                            <select class="form-select fs-6 w-100" id="editScheduleDay" name="scheduleDay" required>

<!--                             <label for="scheduleDay" class="form-label fs-6">Day</label>
                            <select class="form-select fs-6 w-100" id="scheduleDay" name="scheduleDay" required> -->

                                <option value="" disabled selected>Select Day</option>
                                <option value="monday">Monday</option>
                                <option value="tuesday">Tuesday</option>
                                <option value="wednesday">Wednesday</option>
                                <option value="thursday">Thursday</option>
                                <option value="friday">Friday</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">

                            <label for="editScheduleSession" class="form-label fs-6">Session</label>
                            <select class="form-select fs-6 w-100" id="editScheduleSession" name="scheduleSession" required>

<!--                             <label for="scheduleSession" class="form-label fs-6">Session</label>
                            <select class="form-select fs-6 w-100" id="scheduleSession" name="scheduleSession" required> -->

                                <option value="" disabled selected>Select Session</option>
                                <option value="morning">Morning</option>
                                <option value="afternoon">Afternoon</option>
                                <option value="evening">Evening</option>
                            </select>
                        </div>
                    </div>

                    <!-- Section and Subject Fields -->
                    <div class="row mb-3">
                        <div class="col-12 col-md-6">
                            <label for="scheduleSection" class="form-label fs-6">Section</label>
                            <select class="form-select fs-6 w-100" id="scheduleSection" name="scheduleSection" required>
                                <option value="" disabled selected>Select Section</option>
                                <option value="palladium">Palladium</option>
                                <option value="ruby">Ruby</option>
                                <option value="emerald">Emerald</option>
                                <option value="sapphire">Sapphire</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="scheduleSubject" class="form-label fs-6">Subject</label>
                            <select class="form-select fs-6 w-100" id="scheduleSubject" name="scheduleSubject" required>
                                <option value="" disabled selected>Select Subject</option>

                                <option value="English">English</option>
                                <option value="Math">Math</option>
                                <option value="Science">Science</option>
                                <option value="History">History</option>
                            </select>
                        </div>
                    </div>

<!--                                 <option value="english">English</option>
                                <option value="math">Math</option>
                                <option value="science">Science</option>
                                <option value="history">History</option>
                            </select> -->
                        </div>
                    </div>

                    <!-- Time Fields -->
                    <div class="row mb-3">
                        <div class="col-12 col-md-6">
                            <label for="scheduleStartTime" class="form-label">Start Time</label>
                            <input type="time" class="form-control" id="scheduleStartTime" name="scheduleStartTime" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="scheduleEndTime" class="form-label">End Time</label>
                            <input type="time" class="form-control" id="scheduleEndTime" name="scheduleEndTime" required>
                        </div>
                    </div>
                </div>

                <!-- Modal Footer -->
<!--                 <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-success" id="saveScheduleBtn">Save Schedule</button>
                </div> -->
            </div>
        </div>
    </div>


                    <!-- Time Fields -->
                    <div class="row mb-3">
                        <div class="col-12 col-md-6">
                            <label for="editScheduleStartTime" class="form-label">Start Time</label>
                            <input type="time" class="form-control" id="editScheduleStartTime" name="editScheduleStartTime" required>
                        </div>
                        <div class="col-12 col-md-6">
                            <label for="editScheduleEndTime" class="form-label">End Time</label>
                            <input type="time" class="form-control" id="editScheduleEndTime" name="editScheduleEndTime" required>
                        </div>
                    </div>

                <!-- Modal Footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" id="editScheduleBtn">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Delete Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Schedule</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this schedule?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <script>
                        let currentEditingId = null;
            let currentEditingScheduleId = null;

            // Debug function
            function logFormData() {
                console.log('Schedule Form Data:', {
                    day: document.getElementById('scheduleDay').value,
                    session: document.getElementById('scheduleSession').value,
                    subject: document.getElementById('scheduleSubject').value,
                    startTime: document.getElementById('scheduleStartTime').value,
                    endTime: document.getElementById('scheduleEndTime').value
                });
            }

            async function saveSchedule() {
                try {
                    const urlParams = new URLSearchParams(window.location.search);
                    const classId = urlParams.get('id');

                    if (!classId) {
                        throw new Error('No class ID provided');
                    }

                    const scheduleData = {
                        classId: parseInt(classId),
                        day: document.getElementById('scheduleDay').value,
                        session: document.getElementById('scheduleSession').value,
                        subject: document.getElementById('scheduleSubject').value,
                        start: document.getElementById('scheduleStartTime').value,
                        end: document.getElementById('scheduleEndTime').value,
                        isDeleted: false
                    };

                    const response = await fetch('/api/AdminSchedule', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(scheduleData)
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    console.log('Schedule saved:', result);

                    // Refresh the schedule list
                    await loadScheduleData();

                    // Close the modal
                    const addScheduleModal = bootstrap.Modal.getInstance(document.getElementById('addScheduleModal'));
                    if (addScheduleModal) {
                        addScheduleModal.hide();
                    }

                    // Clear the form
                    document.getElementById('scheduleForm').reset();
                } catch (error) {
                    console.error('Error saving schedule:', error);
                    alert('Error saving schedule: ' + error.message);
                }
            }

            async function editSchedule(scheduleId) {
                try {
                    console.log('Editing schedule:', scheduleId);
                    currentEditingScheduleId = scheduleId; // Set the current editing ID

                    // Find the schedule row
                    const row = document.querySelector(`tr[data-schedule-id="${scheduleId}"]`);
                    if (!row) {
                        throw new Error('Schedule row not found');
                    }

                    // Get data from the table cells
                    const cells = row.getElementsByTagName('td');
                    const day = cells[0].textContent.trim();
                    const session = cells[1].textContent.trim();
                    const subject = cells[2].textContent.trim();
                    const startTime = cells[3].textContent.trim();
                    const endTime = cells[4].textContent.trim();

                    console.log('Retrieved values:', { day, session, subject, startTime, endTime });

                    // Populate the edit modal
                    document.getElementById('editScheduleDay').value = day.toLowerCase();
                    document.getElementById('editScheduleSession').value = session.toLowerCase();
                    document.getElementById('scheduleSubject').value = subject.toLowerCase();
                    document.getElementById('editScheduleStartTime').value = convertTo24Hour(startTime);
                    document.getElementById('editScheduleEndTime').value = convertTo24Hour(endTime);

                    // Show the modal (not needed if using data-bs-toggle)
                    // const editModal = new bootstrap.Modal(document.getElementById('editModal'));
                    // editModal.show();

                } catch (error) {
                    console.error('Error preparing edit:', error);
                    alert('Error preparing edit form: ' + error.message);
                }
            }

        async function updateSchedule() {
            try {
                console.log('Updating schedule:', currentEditingScheduleId);
                if (!currentEditingScheduleId) {
                    throw new Error('No schedule selected for editing');
                }

                // Get the class ID from URL
                const classId = parseInt(new URLSearchParams(window.location.search).get('id'));

                // Format the day and session with first letter capitalized
                const day = document.getElementById('editScheduleDay').value;
                const session = document.getElementById('editScheduleSession').value;
                const formattedDay = day.charAt(0).toUpperCase() + day.slice(1).toLowerCase();
                const formattedSession = session.charAt(0).toUpperCase() + session.slice(1).toLowerCase();

                const updatedSchedule = {
                    id: currentEditingScheduleId,
                    classId: classId,
                    day: formattedDay,
                    session: formattedSession,
                    subject: document.getElementById('scheduleSubject').value,
                    start: document.getElementById('editScheduleStartTime').value,
                    end: document.getElementById('editScheduleEndTime').value,
                    isDeleted: false
                };

                console.log('Sending updated schedule:', updatedSchedule);

                // Validate required fields
                if (!updatedSchedule.day || !updatedSchedule.session || !updatedSchedule.subject ||
                    !updatedSchedule.start || !updatedSchedule.end) {
                    throw new Error('All fields are required');
                }

                const response = await fetch(`/api/AdminSchedule/${currentEditingScheduleId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updatedSchedule)
                });

                if (!response.ok) {
                    // Try to get more detailed error message from response
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                }

                // Close the modal
                const editModal = bootstrap.Modal.getInstance(document.getElementById('editModal'));
                if (editModal) {
                    editModal.hide();
                }

                // Refresh the schedule list
                await loadScheduleData();

                alert('Schedule updated successfully');
            } catch (error) {
                console.error('Error updating schedule:', error);
                alert('Error updating schedule: ' + error.message);
            }
        }

            async function loadScheduleData() {
                try {
                    const urlParams = new URLSearchParams(window.location.search);
                    const classId = urlParams.get('id');

                    if (!classId) {
                        throw new Error('No class ID provided');
                    }

                    // Updated endpoint to match the controller route
                    const response = await fetch(`/api/AdminSchedule/class/${classId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const schedules = await response.json();
                    console.log('Received schedules:', schedules);

                    const tableBody = document.querySelector('.schedule-table tbody');
                    if (!tableBody) {
                        throw new Error('Schedule table body not found');
                    }

                    // Clear existing rows
                    tableBody.innerHTML = '';

                    // Check if we have any schedules
                    if (!schedules || schedules.length === 0) {
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center">
                                    No schedules found for this class.
                                </td>
                            </tr>
                        `;
                        return;
                    }

                    // Populate table with schedule data
                    schedules.forEach(schedule => {
                        const row = `
                <tr data-schedule-id="${schedule.id}">
                    <td>${schedule.day}</td>
                    <td>${schedule.session}</td>
                    <td>${schedule.subject}</td>
                    <td>${formatTime(schedule.start)}</td>
                    <td>${formatTime(schedule.end)}</td>
                    <td>
                        <button type="button"
                                class="btn btn-warning btn-sm edit-schedule-btn"
                                data-bs-toggle="modal"
                                data-bs-target="#editModal"
                                onclick="editSchedule(${schedule.id})">
                            Edit
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="deleteSchedule(${schedule.id})">Remove</button>
                    </td>
                </tr>
            `;
                        tableBody.insertAdjacentHTML('beforeend', row);
                    });
                } catch (error) {
                    console.error('Error loading schedule data:', error);
                    const tableBody = document.querySelector('.schedule-table tbody');
                    if (tableBody) {
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="6" class="text-center text-danger">
                                    Error loading schedules. Please try again.
                                </td>
                            </tr>
                        `;
                    }
                }
            }

        async function loadClassData() {
            try {
                console.log('Making API request for class data...');
                const urlParams = new URLSearchParams(window.location.search);
                const classId = urlParams.get('id');

                if (!classId) {
                    throw new Error('No class ID provided');
                }

                console.log('Fetching class with ID:', classId);
                const response = await fetch(`/api/AdminClass/${classId}`);

                // Get the error details
                const responseData = await response.text();
                console.log('Raw response:', responseData);

                if (!response.ok) {
                    let errorMessage = 'Unknown error occurred';
                    try {
                        const errorData = JSON.parse(responseData);
                        errorMessage = errorData.message || errorData.details || responseData;
                    } catch (e) {
                        errorMessage = responseData;
                    }
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorMessage}`);
                }

                const classData = JSON.parse(responseData);
                console.log('Received class data:', classData);

                // Update table with data
                updateClassTable(classData);
            } catch (error) {
                console.error('Error loading class data:', error);
                handleClassLoadError(error);
            }
        }


        async function removeClass() {
            try {
                const classId = parseInt(new URLSearchParams(window.location.search).get('id'));

                // Close the bootstrap modal first
                const removeClassModal = bootstrap.Modal.getInstance(document.getElementById('removeclassModal'));
                if (removeClassModal) {
                    removeClassModal.hide();
                }

                // Show SweetAlert2 confirmation
                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "This will remove the class and all associated schedules. This action can be undone by an administrator.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, remove it!',
                    cancelButtonText: 'Cancel'
                });

                if (result.isConfirmed) {
                    const response = await fetch(`/api/AdminClass/${classId}/softdelete`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    // Show success message
                    await Swal.fire({
                        title: 'Removed!',
                        text: 'The class has been removed successfully.',
                        icon: 'success',
                        timer: 1500
                    });

                    // Redirect back to classes page
                    window.location.href = '/AdminPortal/Classes';
                }
            } catch (error) {
                console.error('Error removing class:', error);
                await Swal.fire({
                    title: 'Error!',
                    text: 'Failed to remove class: ' + error.message,
                    icon: 'error'
                });
            }
        }
                function convertTo24Hour(time12h) {
            if (!time12h) return '';
            try {
                const [time, modifier] = time12h.split(' ');
                let [hours, minutes] = time.split(':');

                hours = parseInt(hours);
                if (modifier === 'PM' && hours < 12) hours += 12;
                if (modifier === 'AM' && hours === 12) hours = 0;

                return `${hours.toString().padStart(2, '0')}:${minutes}`;
            } catch (error) {
                console.error('Error converting time:', error);
                return time12h;
            }
        }

        function formatTime(timeString) {
            if (!timeString) return '';
            try {
                const time = new Date(`2000-01-01T${timeString}`);
                return time.toLocaleTimeString('en-US', {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                });
            } catch (error) {
                console.error('Error formatting time:', error);
                return timeString;
            }
        }

        function updateClassTable(classData) {
            const tableBody = document.querySelector('.table tbody');
            if (!tableBody) return;

            if (!classData || classData.isDeleted) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center">
                            Class not found or has been deleted.
                        </td>
                    </tr>
                `;
                return;
            }

            tableBody.innerHTML = `
                <tr>
                    <td>${classData.section || 'N/A'}</td>
                    <td>${classData.faculty || 'N/A'}</td>
                    <td>${classData.subject || 'N/A'}</td>
                    <td>${classData.gradeLevel || 'N/A'}</td>
                    <td>
                        <button type="button" class="btn btn-warning btn-sm"
                                data-bs-toggle="modal" data-bs-target="#editModal"
                                data-section="${classData.section || ''}"
                                data-faculty="${classData.faculty || ''}"
                                data-subject="${classData.subject || ''}"
                                data-grade="${classData.gradeLevel || ''}">
                            Edit
                        </button>
                    </td>
                </tr>
            `;
        }

        function handleClassLoadError(error) {
            const tableBody = document.querySelector('.table tbody');
            if (tableBody) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center text-danger">
                            ${error.message}
                        </td>
                    </tr>
                `;
            }

            // Show error using SweetAlert2
            Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error'
            });
        }
        // Event listeners
        document.addEventListener('DOMContentLoaded', () => {
            console.log('Document loaded, initializing...');
            loadClassData();
            loadScheduleData();

            // Remove class button
            const removeClassBtn = document.querySelector('#removeclassModal .modal-footer .btn-danger');
            if (removeClassBtn) {
                removeClassBtn.addEventListener('click', removeClass);
            }

            // Edit schedule button
            const editScheduleBtn = document.getElementById('editScheduleBtn');
            if (editScheduleBtn) {
                editScheduleBtn.addEventListener('click', updateSchedule);
            }

            // Add schedule button
            const saveScheduleBtn = document.getElementById('saveScheduleBtn');
            if (saveScheduleBtn) {
                saveScheduleBtn.addEventListener('click', saveSchedule);
            }
        });
    </script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />
</body>
