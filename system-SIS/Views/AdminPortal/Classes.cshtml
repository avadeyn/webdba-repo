@{
    Layout = "Admin_Layout";  // Specifies the layout to use
    ViewData["Title"] = "Home Page";
}


<body class="position-relative bg-image" style="font-family: 'Poppins', sans-serif; overflow-x: hidden; height: 100vh; width: 100vw; margin: 0;">
    <!-- Background Image -->
    <img src="~/images/bgjr.png"
         alt="Decorative background representing Grade 7"
         class="img-fluid w-100"
         style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; z-index: -1;">

    <!-- Main Content -->
    <div class="container" style="background-color: rgba(220, 232, 253, 0.9); padding: 20px; border-radius: 10px;">
        <section class="d-flex justify-content-between align-items-center flex-wrap mb-3" style="font-weight: bold;">
            <p class="text-sm text-black fs-5">
                <i class="fas fa-user text-black"></i>
                <a asp-controller="AdminPortal" asp-action="Classes" class="text-black text-decoration-none">Class Management</a>
            </p>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createClassModal">
                + Class
            </button>
        </section>


        <div class="row g-2 align-items-center mb-4">
            <!-- Incoming Grade -->
            <div class="col-12 col-md-6 col-lg-3">
                <label for="dropdownIncomingGradeLevel" class="form-label">Grade Level</label>
                <select class="form-select" id="dropdownIncomingGradeLevel">
                    <option value="">Show All Grades</option>
                    <option value="7">Grade 7</option>
                    <option value="8">Grade 8</option>
                    <option value="9">Grade 9</option>
                    <option value="10">Grade 10</option>
                </select>
            </div>

            <!-- School Year -->
            <div class="col-12 col-md-6 col-lg-3">
                <label for="dropdownSchoolYear" class="form-label">School Year</label>
                <select class="form-select" id="dropdownSchoolYear">
                    <option value="">Show All Years</option>
                    <option value="2020-2021">2020 - 2021</option>
                    <option value="2021-2022">2021 - 2022</option>
                    <option value="2022-2023">2022 - 2023</option>
                    <option value="2023-2024">2023 - 2024</option>
                    <option value="2024-2025">2024 - 2025</option>
                </select>
            </div>

            <!-- Reset Button -->
            <div class="col-12 col-md-6 col-lg-2">
                <label class="form-label">&nbsp;</label>
                <button class="btn btn-secondary w-100" onclick="resetFilters()">Reset Filters</button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th style="background-color: #162051; color: white; border-top-left-radius: 10px;">Subject</th>
                        <th style="background-color: #162051; color: white;">Schedule</th>
                        <th style="background-color: #162051; color: white;">Faculty</th>
                        <th style="background-color: #162051; color: white;">Grade Level</th>
                        <th style="background-color: #162051; color: white; border-top-right-radius: 10px;">School Year</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- This will be populated dynamically by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>


    <!-- + class -->
    <div class="modal fade" id="createClassModal" tabindex="-1" aria-labelledby="createClassModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <!-- Reduced width -->
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="createClassModalLabel">Create Class</h5>
                </div>

                <div class="modal-body">
                    <!-- Section and Subject Inline -->
                    <div class="mb-3">
                        <label for="dropdownSection" class="form-label fs-6">Select Section</label>
                        <select class="form-select fs-6 w-100" id="dropdownSection" aria-label="Select Section">
                            <option value="palladium">Palladium</option>
                            <option value="ruby">Ruby</option>
                            <option value="emerald">Emerald</option>
                            <option value="sapphire">Sapphire</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="dropdownSubject" class="form-label fs-6">Select Subject</label>
                        <select class="form-select fs-6 w-100" id="dropdownSubject" aria-label="Choose Subject">
                            <option value="english">English</option>
                            <option value="math">Math</option>
                            <option value="science">Science</option>
                            <option value="history">History</option>
                        </select>
                    </div>

                    <!-- Year Level -->
                    <div class="mb-3">
                        <label for="dropdownYearLevel" class="form-label fs-6">School Year</label>
                        <select class="form-select fs-6 w-100" id="dropdownYearLevel" aria-label="Select School Year">
                            <option value="1">2020-2021</option>
                            <option value="2">2021-2022</option>
                            <option value="3">2022-2023</option>
                            <option value="4">2023-2024</option>
                            <option value="5">2024-2025</option>
                        </select>
                    </div>

                    <!-- Faculty and Incoming Grade -->
                    <div class="mb-3">
                        <label for="faculty" class="form-label fs-6">Faculty</label>
                        <select class="form-select" id="faculty">
                            <option>Choose...</option>
                            <!-- Add faculty options here -->
                        </select>
                    </div>
                    <!-- In the create class modal -->
                    <div class="mb-3">
                        <label for="createGradeLevel" class="form-label fs-6">Select Incoming Grade</label>
                        <select class="form-select fs-6 w-100" id="createGradeLevel" aria-label="Select Incoming Grade">
                            <option value="7">Grade 7</option>
                            <option value="8">Grade 8</option>
                            <option value="9">Grade 9</option>
                            <option value="10">Grade 10</option>
                        </select>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-success">Save Class</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            // Load faculty options when creating a new class
            await loadFacultyOptions();

            // Handle class creation
            const saveClassBtn = document.querySelector('#createClassModal .btn-success');
            saveClassBtn.addEventListener('click', createClass);

            await loadClassData();

            // Add filter event listeners
            document.getElementById('dropdownIncomingGradeLevel').addEventListener('change', loadClassData);
            document.getElementById('dropdownSchoolYear').addEventListener('change', loadClassData);
        });

        async function loadFacultyOptions() {
            try {
                const response = await fetch('/api/Faculty');
                const faculty = await response.json();

                const facultySelect = document.getElementById('faculty');
                facultySelect.innerHTML = '<option value="">Choose...</option>';

                faculty.forEach(f => {
                    const option = document.createElement('option');
                    option.value = f.id;
                    option.textContent = f.facultyName;
                    facultySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading faculty:', error);
            }
        }

        async function createClass() {
            try {
                const section = document.getElementById('dropdownSection').value;
                const subject = document.getElementById('dropdownSubject').value;
                const facultySelect = document.getElementById('faculty');
                const facultyName = facultySelect.options[facultySelect.selectedIndex].text;
                const gradeLevel = document.getElementById('createGradeLevel').value; // Updated ID
                const yearLevelSelect = document.getElementById('dropdownYearLevel');

                // Map the year level value to actual school year
                const schoolYearMap = {
                    "1": "2020-2021",
                    "2": "2021-2022",
                    "3": "2022-2023",
                    "4": "2023-2024",
                    "5": "2024-2025"
                };

                const schoolYear = schoolYearMap[yearLevelSelect.value];

                // Validate required fields
                if (!section) throw new Error('Section is required');
                if (!subject) throw new Error('Subject is required');
                if (!facultyName || facultyName === 'Choose...') throw new Error('Faculty is required');
                if (!gradeLevel) throw new Error('Grade Level is required');
                if (!schoolYear) throw new Error('School Year is required');

                const classData = {
                    section: section,
                    faculty: facultyName,
                    subject: subject,
                    gradeLevel: gradeLevel,
                    schoolYear: schoolYear
                };

                console.log('Creating class with data:', classData); // Debug log

                const response = await fetch('/api/AdminClass', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(classData)
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Failed to create class: ${errorText}`);
                }

                const result = await response.json();

                // Close modal and show success message
                const modal = bootstrap.Modal.getInstance(document.getElementById('createClassModal'));
                modal.hide();

                // Reset form
                document.getElementById('dropdownSection').value = 'palladium';
                document.getElementById('dropdownSubject').value = 'english';
                document.getElementById('faculty').value = '';
                document.getElementById('createGradeLevel').value = '7';
                document.getElementById('dropdownYearLevel').value = '1';

                // Reload the class data table
                await loadClassData();

                // Show success alert
                await Swal.fire({
                    title: 'Success!',
                    text: 'Class has been created successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }


        async function loadClassData() {
            try {
                const response = await fetch('/api/AdminClass');
                let classes = await response.json();

                // Get filter values
                const selectedGrade = document.getElementById('dropdownIncomingGradeLevel').value;
                const selectedYear = document.getElementById('dropdownSchoolYear').value;

                // Apply filters if they are set
                if (selectedGrade) {
                    classes = classes.filter(c => c.gradeLevel === selectedGrade);
                }
                if (selectedYear) {
                    classes = classes.filter(c => c.schoolYear === selectedYear);
                }

                const tableBody = document.querySelector('.table tbody');
                tableBody.innerHTML = '';

                if (classes.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="5" class="text-center">No classes available</td></tr>';
                    return;
                }

                for (const classItem of classes) {
                    const scheduleResponse = await fetch(`/api/AdminSchedule/class/${classItem.id}`);
                    const schedules = await scheduleResponse.json();

                    let scheduleDisplay = 'No schedule';
                    if (schedules && schedules.length > 0) {
                        scheduleDisplay = schedules.map(schedule =>
                            `${schedule.day} (${formatTime(schedule.start)} - ${formatTime(schedule.end)})`
                        ).join(', ');
                    }

                    const row = `
                        <tr style="cursor: pointer;" onclick="window.location.href='/AdminPortal/Scheduleclass?id=${classItem.id}'">
                            <td>${classItem.subject}</td>
                            <td>${scheduleDisplay}</td>
                            <td>${classItem.faculty}</td>
                            <td>Grade ${classItem.gradeLevel || 'N/A'}</td>
                            <td>${classItem.schoolYear || 'N/A'}</td>
                        </tr>
                    `;
                    tableBody.insertAdjacentHTML('beforeend', row);
                }
            } catch (error) {
                console.error('Error loading class data:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to load class data: ' + error.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        function formatTime(timeString) {
            try {
                const time = new Date(`2000-01-01T${timeString}`);
                return time.toLocaleTimeString('en-US', {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                });
            } catch (error) {
                console.error('Error formatting time:', error);
                return timeString;
            }
        }

        function resetFilters() {
            const gradeLevelDropdown = document.getElementById('dropdownIncomingGradeLevel');
            const schoolYearDropdown = document.getElementById('dropdownSchoolYear');
            
            gradeLevelDropdown.value = '';
            schoolYearDropdown.value = '';
            
            loadClassData();
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
